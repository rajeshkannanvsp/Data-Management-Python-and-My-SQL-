from django.shortcuts import render
import aspose.words as aw
from pathlib import Path
import shutil
from bs4 import BeautifulSoup

# def 400(request):
#     return render(request,"400.html")

# def 403(request):
#     return render(request,"403.html")

# def 404(request):
#     return render(request,"404.html")

# def 500(request):
#     return render(request,"500.html")

# def 503(request):
#     return render(request,"503.html")


def advanced_components(request):
    return render(request, "advanced-components.html")


def apexcharts(request):
    return render(request, "apexcharts.html")


def apexcharts(request):
    return render(request, "apexcharts.html")


def basic_table(request):
    return render(request, "basic-table.html")


def blank(request):
    return render(request, "blank.html")


def blog(request):
    return render(request, "blog.html")


def blog_detail(request):
    return render(request, "blog-detail.html")


def bootstrap_icon(request):
    return render(request, "bootstrap-icon.html")


def calendar(request):
    return render(request, "calendar.html")


def chat(request):
    return render(request, "chat.html")


def color_settings(request):
    return render(request, "color-settings.html")


def contact_directory(request):
    return render(request, "contact-directory.html")


def custom_icon(request):
    return render(request, "custom-icon.html")


def datatable(request):
    return render(request, "datatable.html")


def faq(request):
    return render(request, "faq.html")


def font_awesome(request):
    return render(request, "font-awesome.html")


def forgot_password(request):
    return render(request, "forgot-password.html")


def reset_password(request):
    return render(request, "reset-password.html")


def form_basic(request):
    return render(request, "form-basic.html")


def form_pickers(request):
    return render(request, "form-pickers.html")


def form_wizard(request):
    return render(request, "form-wizard.html")


def foundation(request):
    return render(request, "foundation.html")


def gallery(request):
    return render(request, "gallery.html")


def getting_started(request):
    return render(request, "getting-started.html")


def highchart(request):
    return render(request, "highchart.html")


def html5_editor(request):
    return render(request, "html5-editor.html")


def image_cropper(request):
    return render(request, "image-cropper.html")


def image_dropzone(request):
    return render(request, "image-dropzone.html")


def index(request):
    iframe = False
    pdf = False
    doc = False
    docx = False
    res_file = None
    err = False
    if request.method == "POST":
        try:
            shutil.rmtree("Template/static/Temp/HtmlFiles")
        except Exception as e:
            pass
        res_file = request.FILES["file_input"]
        if Path(str(res_file)).suffix == ".pdf":
            file_content = res_file.read()
            with open(
                "Template/static/Temp/DocFiles/InputPdf.pdf", "wb"
            ) as output_file:
                output_file.write(file_content)
            pdfdoc = aw.Document("Template/static/Temp/DocFiles/InputPdf.pdf")
            pdfdoc.save("Template/static/Temp/HtmlFiles/PdfHtml.html")
            with open(
                "Template/static/Temp/HtmlFiles/PdfHtml.html",
                "r",
                encoding="utf-8",
            ) as file:
                html_content = file.read()
            soup = BeautifulSoup(html_content, "html.parser")
            head_tag = soup.head
            if head_tag:
                head_tag.extract()
            div_remove1 = soup.find_all(
                "div", style="-aw-headerfooter-type:header-primary; clear:both"
            )
            for div1 in div_remove1:
                div1.extract()
            p_tags_to_remove = soup.find_all(
                "p", style="margin-top:0pt; margin-bottom:0pt"
            )
            for p_tag in p_tags_to_remove:
                p_tag.extract()
            with open(
                "Template/static/Temp/HtmlFiles/PdfHtml.html",
                "w",
                encoding="utf-8",
            ) as file:
                file.write(str(soup))

            iframe = True
            pdf = True
        elif Path(str(res_file)).suffix == ".doc":
            file_content = res_file.read()
            with open(
                "Template/static/Temp/DocFiles/InputDoc.doc", "wb"
            ) as output_file:
                output_file.write(file_content)
            docdoc = aw.Document("Template/static/Temp/DocFiles/InputDoc.doc")
            docdoc.save("Template/static/Temp/HtmlFiles/DocHtml.html")
            with open(
                "Template/static/Temp/HtmlFiles/DocHtml.html",
                "r",
                encoding="utf-8",
            ) as file:
                html_content = file.read()
            soup = BeautifulSoup(html_content, "html.parser")
            head_tag = soup.head
            if head_tag:
                head_tag.extract()
            div_remove1 = soup.find_all(
                "div", style="-aw-headerfooter-type:header-primary; clear:both"
            )
            for div1 in div_remove1:
                div1.extract()
            p_tags_to_remove = soup.find_all(
                "p", style="margin-top:0pt; margin-bottom:0pt; font-size:12pt"
            )
            for p_tag in p_tags_to_remove:
                p_tag.extract()
            with open(
                "Template/static/Temp/HtmlFiles/DocHtml.html",
                "w",
                encoding="utf-8",
            ) as file:
                file.write(str(soup))
            iframe = True
            doc = True
        elif Path(str(res_file)).suffix == ".docx":
            file_content = res_file.read()
            with open(
                "Template/static/Temp/DocFiles/InputDocx.docx", "wb"
            ) as output_file:
                output_file.write(file_content)
            docxdoc = aw.Document("Template/static/Temp/DocFiles/InputDocx.docx")
            docxdoc.save("Template/static/Temp/HtmlFiles/DocxHtml.html")
            with open(
                "Template/static/Temp/HtmlFiles/DocxHtml.html",
                "r",
                encoding="utf-8",
            ) as file:
                html_content = file.read()
            soup = BeautifulSoup(html_content, "html.parser")
            head_tag = soup.head
            if head_tag:
                head_tag.extract()
            div_remove1 = soup.find_all(
                "div", style="-aw-headerfooter-type:header-primary; clear:both"
            )
            for div1 in div_remove1:
                div1.extract()
            p_tags_to_remove = soup.find_all(
                "p", style="margin-top:0pt; margin-bottom:0pt; font-size:12pt"
            )
            for p_tag in p_tags_to_remove:
                p_tag.extract()
            with open(
                "Template/static/Temp/HtmlFiles/DocxHtml.html",
                "w",
                encoding="utf-8",
            ) as file:
                file.write(str(soup))
            iframe = True
            docx = True
        else:
            err = True

    return render(
        request,
        "index.html",
        {
            "iframe": iframe,
            "pdf": pdf,
            "doc": doc,
            "docx": docx,
            "name": str(res_file),
            "err": err,
        },
    )


def index2(request):
    return render(request, "index2.html")


def index3(request):
    return render(request, "index3.html")


def introduction(request):
    return render(request, "introduction.html")


def invoice(request):
    return render(request, "invoice.html")


def ionicons(request):
    return render(request, "ionicons.html")


def jvectormap(request):
    return render(request, "jvectormap.html")


def knob_chart(request):
    return render(request, "knob-chart.html")


def login(request):
    return render(request, "login.html")


def pricing_table(request):
    return render(request, "pricing-table.html")


def product_detail(request):
    return render(request, "product-detail.html")


def product(request):
    return render(request, "product.html")


def profile(request):
    return render(request, "profile.html")


def register(request):
    return render(request, "register.html")


def sitemap(request):
    return render(request, "sitemap.html")


def themify(request):
    return render(request, "themify.html")


def third_party_plugins(request):
    return render(request, "third-party-plugins.html")


def ui_buttons(request):
    return render(request, "ui-buttons.html")


def ui_cards_hover(request):
    return render(request, "ui-cards-hover.html")


def ui_cards(request):
    return render(request, "ui-cards.html")


def ui_carousel(request):
    return render(request, "ui-carousel.html")


def ui_list_group(request):
    return render(request, "ui-list-group.html")


def ui_modals(request):
    return render(request, "ui-modals.html")


def ui_notification(request):
    return render(request, "ui-notification.html")


def ui_progressbar(request):
    return render(request, "ui-progressbar.html")


def ui_range_slider(request):
    return render(request, "ui-range-slider.html")


def ui_sweet_alert(request):
    return render(request, "ui-sweet-alert.html")


def ui_tabs(request):
    return render(request, "ui-tabs.html")


def ui_timeline(request):
    return render(request, "ui-timeline.html")


def ui_tooltip_popover(request):
    return render(request, "ui-tooltip-popover.html")


def ui_typography(request):
    return render(request, "ui-typography.html")


def ui_videoplayer(request):
    return render(request, "video-player.html")
